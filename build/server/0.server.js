exports.ids = [0];
exports.modules = {

/***/ "./server/routes/authRoutes.js":
/*!*************************************!*\
  !*** ./server/routes/authRoutes.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var passport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! passport */ \"passport\");\n/* harmony import */ var passport__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(passport__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _hapi_joi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @hapi/joi */ \"@hapi/joi\");\n/* harmony import */ var _hapi_joi__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_hapi_joi__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ \"lodash\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nvar User = mongoose__WEBPACK_IMPORTED_MODULE_4___default.a.model(\"User\");\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (app) {// app.post(\"/auth/login\", async (req, res, next) => {\n  //   const schema = Joi.object({\n  //     email: Joi.string()\n  //       .email({ minDomainSegments: 2, tlds: { allow: [\"com\", \"net\"] } })\n  //       .required(),\n  //     password: Joi.string()\n  //       .min(3)\n  //       .required()\n  //   });\n  //   try {\n  //     // initial user given input validate........\n  //     const { error } = schema.validate(req.body, { abortEarly: false });\n  //     if (error) {\n  //       const customError = new Error();\n  //       customError.statusCode = 401;\n  //       customError.error = error;\n  //       throw customError;\n  //     }\n  //     // Manually Database query && ==> after validate.......\n  //     let user = await User.findOne({ email: req.body.email });\n  //     if (!user) {\n  //       const customError = new Error();\n  //       customError.statusCode = 401;\n  //       const newError = {\n  //         details: [\n  //           { message: \"This Email is not yet Registered\", path: [\"email\"] }\n  //         ]\n  //       };\n  //       customError.error = newError;\n  //       throw customError;\n  //     }\n  //     // if u put it bottom u need call it with (req, res, next) and we got more control\n  //     // Passport hit............\n  //     passport.authenticate(\"local\", (err, user, info) => {\n  //       // this callback custom cb extend more control\n  //       // when we throw error from passport strategy ( password not or user not found )\n  //       if (!user) return res.send(\"User not Found\");\n  //       req.logIn(user, function(err) {\n  //         if (err) return next(err);\n  //         res.send(user);\n  //       });\n  //     })(req, res, next);\n  //   } catch (ex) {\n  //     const errors = {};\n  //     if (ex.error) {\n  //       for (let error of ex.error.details) {\n  //         errors[error.path[0]] = error.message;\n  //       }\n  //     }\n  //     return res.send(errors);\n  //   }\n  // });\n  // app.post(\"/auth/register\", async (req, res, next) => {\n  //   const schema = Joi.object({\n  //     username: Joi.string()\n  //       .min(3)\n  //       .required(),\n  //     email: Joi.string()\n  //       .email({ minDomainSegments: 2, tlds: { allow: [\"com\", \"net\"] } })\n  //       .required(),\n  //     password: Joi.string()\n  //       .min(3)\n  //       .required(),\n  //     confirmPassword: Joi.string()\n  //       .min(3)\n  //       .required()\n  //   });\n  //   try {\n  //     const { error } = schema.validate(req.body, { abortEarly: false });\n  //     if (error) {\n  //       let customError = new Error();\n  //       customError.statusCode = 401;\n  //       customError.error = error;\n  //       throw customError;\n  //     }\n  //     let user = await User.findOne({ email: req.body.email });\n  //     if (user) {\n  //       const newError = {\n  //         details: [\n  //           { message: \"This Email Already registered\", path: [\"email\"] }\n  //         ]\n  //       };\n  //       let customError = new Error();\n  //       customError.statusCode = 401;\n  //       customError.error = newError;\n  //       throw customError;\n  //     }\n  //     if (req.body.password !== req.body.confirmPassword) {\n  //       const newError = {\n  //         details: [\n  //           { message: \"password Does'nt match\", path: [\"confirmPassword\"] }\n  //         ]\n  //       };\n  //       let customError = new Error();\n  //       customError.statusCode = 401;\n  //       customError.error = newError;\n  //       throw customError;\n  //     }\n  //     let salt = await bcryptjs.genSalt(10);\n  //     let hashedPassword = await bcryptjs.hash(req.body.password, salt);\n  //     user = await new User({\n  //       ..._.pick(req.body, [\"email\", \"username\"]),\n  //       password: hashedPassword\n  //     }).save();\n  //     res.send(\"Resigter Success\");\n  //   } catch (ex) {\n  //     let errors = {};\n  //     if (ex.error) {\n  //       for (let error of ex.error.details) {\n  //         errors[error.path[0]] = error.message;\n  //       }\n  //     }\n  //     res.send(errors);\n  //   }\n  // });\n  // // Logout Route..........\n  // app.get(\"/auth/logout\", (req, res, next) => {\n  //   req.logout();\n  //   res.send(\"Logout Success......\");\n  // });\n  // // currentUser Route.......\n  // app.get(\"/auth/currentUser\", (req, res, next) => {\n  //   res.send(req.user);\n  // });\n});\n\n//# sourceURL=webpack:///./server/routes/authRoutes.js?");

/***/ })

};;